'use client';
 import { useState } from 'react';
 import { useTTS } from '@/hooks/useTTS';
 export default function TTSExample() {
      const [text, setText] = useState('Hello! This is a test message for voice synthesis.');
        const [persona, setPersona] = useState<'hitesh' | 'piyush'>('hitesh'); 
          const { speak, stop, isLoading, isPlaying, error, lastAudioUrl } = useTTS({   autoPlay: true,   fallbackEnabled: true  });  const handleSpeak = async () => {   await speak(text, persona);  };  const handleStop = () => {
               stop(); };  return (
                    <div className="p-6 max-w-2xl mx-auto bg-white rounded-lg shadow-md\">     <h2 className="text-2xl font-bold mb-4 text-gray-800\">\n        üéµ ElevenLabs TTS Integration\n      </h2>\n      \n      {/* Text Input */}\n      <div className="mb-4">\n        <label htmlFor="text" className="block text-sm font-medium text-gray-700 mb-2\">\n          Text to Speak\n        </label>       <textarea         id="text\"       value={text}         onChange={(e) => setText(e.target.value)}        className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"  
                           rows={3}         maxLength={2500}        placeholder="Enter text to convert to speech...\"       />
                               <div className="text-xs text-gray-500 mt-1\">
                                        {text.length}/2500 characters\n        </div>\n      </div>\n\n      {/* Persona Selection */}\n      <div className="mb-4">        <label className="block text-sm font-medium text-gray-700 mb-2\">\n          Choose Persona\n        </label>\n    
                                            <div className="flex space-x-4\">\n          <label className="flex items-center\">        <input             type="radio\"
                                                          value="hitesh\"          checked={persona === 'hitesh'}
                                                                       onChange={(e) => setPersona(e.target.value as 'hitesh' | 'piyush')}
                                                                                   className="mr-2\"          />         Hitesh         </label>         <label className="flex items-center\">\n            <input         type="radio"              value="piyush\"
                                                                                                 checked={persona === 'piyush'}         onChange={(e) => setPersona(e.target.value as 'hitesh' | 'piyush')}
                                                                                                             className="mr-2\"           />           Piyush         </label>\n        </div>\n      </div>\n\n      {/* Control Buttons */}\n      <div className="flex space-x-3 mb-4\">\n        <button          onClick={handleSpeak}          disabled={isLoading || !text.trim()}
                                                                                                                       className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed flex items-center\"        >\n          {isLoading ? (           <>\n              <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white\" xmlns="http://www.w3.org/2000/svg\" fill="none" viewBox="0 0 24 24\">\n                <circle className="opacity-25\" cx="12\" cy="12\" r="10\" stroke="currentColor\" strokeWidth="4"></circle>\n                <path className="opacity-75\" fill="currentColor\" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n              </svg>\n              Generating...\n            </>          ) : isPlaying ? (           'üîä Playing'          ) : (            'üéµ Speak'          )}\n        </button>\n        \n        <button         onClick={handleStop}         disabled={!isPlaying && !isLoading}          className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 disabled:bg-gray-400 disabled:cursor-not-allowed\"       >\n          ‚èπÔ∏è Stop\n        </button>\n      </div>\n\n      {/* Status Display */}\n      <div className="mb-4\">\n        <div className="text-sm text-gray-600\">\n          <strong>Status:</strong> \n          {isLoading && ' Generating speech...'}\n          {isPlaying && ' Playing audio...'}\n          {!isLoading && !isPlaying && ' Ready'}\n        </div>\n        \n        {lastAudioUrl && (         <div className="text-sm text-green-600 mt-1\">          <strong>Generated Audio:</strong> \n            <a            href={lastAudioUrl}             target="_blank\"              rel="noopener noreferrer\"             className="underline hover:text-green-800\"            >\n              {lastAudioUrl}\n            </a>\n          </div>       )}\n      </div>\n\n      {/* Error Display */}\n      {error && (        <div className="mb-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded\">\n          <strong>Error:</strong> {error}\n        </div>      )}\n\n      {/* Instructions */}\n      <div className="text-sm text-gray-600 bg-gray-50 p-3 rounded\">\n        <h3 className="font-semibold mb-2\">Instructions:</h3>\n        <ol className="list-decimal list-inside space-y-1\">\n          <li>Add your ElevenLabs API key to <code>.env.local</code></li>\n          <li>Configure voice IDs for Hitesh and Piyush personas</li>\n          <li>Enter text and select a persona</li>\n             <li>If ElevenLabs fails, it will fallback to Web Speech API</li>        </ol>      </div>   </div>  );}